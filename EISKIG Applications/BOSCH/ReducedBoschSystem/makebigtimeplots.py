# -*- coding: utf-8 -*-
"""makebigtimeplots.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NwZFc-zj32GdP021g0xnIYkF--2HRdqW
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import timedelta
import glob
# Specify the relative path to the files
path = 'experiments_hr/ReducedBoschSystem/results/compare_ppo_rb3/'
# path = 'experiments_hr/ReducedBoschSystem/results/compare_FY/'

# Get a list of all the csv files in the specified directory
all_files_ag1 = glob.glob(path + 'agent_8*episode.csv')
# all_files_ag1 = glob.glob(path + 'agent_8*episode.csv')
fullyear = False
# Loop through the list of files and read each one into a dataframe
a = 0
for filename in all_files_ag1[0:2]:
    combined_df = pd.read_csv(filename, index_col=None, header=0,sep=";")
    combined_df['dateTime']=pd.to_datetime(combined_df['dateTime'])
    combined_df.set_index('dateTime', drop=True,inplace=True)
    for i in combined_df.columns:
        try:
            combined_df[i] = combined_df[i].astype(float)
        except:
            combined_df.drop(columns=i, inplace=True)

    df = combined_df#.resample('H').mean()
    #start_date = '2018-06-01'
    #df = df[start_date:]

    # create figure and axes with custom layout/adjustments
    figure = plt.figure(figsize=(15, 22), dpi=200)
    axes = []
    axes.append(figure.add_subplot(5, 1, 1))
    axes.append(figure.add_subplot(5, 1, 2, sharex=axes[0]))
    axes.append(figure.add_subplot(10, 1, 5, sharex=axes[0]))
    axes.append(figure.add_subplot(10, 1, 6, sharex=axes[0]))
    axes.append(figure.add_subplot(5, 1, 4, sharex=axes[0]))
    axes.append(figure.add_subplot(10, 1, 9, sharex=axes[0]))
    axes.append(figure.add_subplot(10, 1, 10, sharex=axes[0]))
    plt.tight_layout()
    figure.subplots_adjust(left=0.125, bottom=0.05, right=0.9, top=0.95, wspace=0.2, hspace=0.05)

    # set x/y axe and datetime begin
    x = df.reset_index().index
    y = df

    actions = ['u_P1', 'u_P2', 'u_P3', 'u_KT_1', 'u_KT_2', 'u_KT_3',
        'u_KT_4', 'u_KT_5', 'u_KT_6', 'u_WT1', 'u_WT2', 'u_KKM1_On', 'u_KKM2_On']
    action_labels = ['u_P1', 'u_P2', 'u_P3', 'u_CT_1', 'u_CT_2', 'u_CT_3',
        'u_CT_4', 'u_CT_5', 'u_CT_6', 'u_HE1', 'u_HE2', 'u_CC1', 'u_CC2']
    # (1) - Plot actions as heatmap
    axes[0].set_yticks(np.arange(len(actions)))
    axes[0].set_yticklabels(action_labels)
    im = axes[0].imshow(
        df[actions].transpose(), cmap="Reds", vmin=0, vmax=1, aspect="auto", interpolation="none"
    )
    # add colorbar
    ax_pos = axes[0].get_position().get_points().flatten()
    ax_colorbar = figure.add_axes(
        [0.93, ax_pos[1] + 0.05, 0.01, ax_pos[3] - ax_pos[1] - 0.1]
    )  ## the parameters are the specified position you set
    figure.colorbar(im, ax=axes[0], shrink=0.9, cax=ax_colorbar)

    dt_begin = df.index[0]
    sampling_time = 120 if not fullyear else 3600

    timeRange = np.arange(
        (1 - dt_begin.minute / 60) * 60 * 60 / sampling_time,
        df.shape[0],
        1 * 60 * 60 / sampling_time,)
    dt_begin = dt_begin.replace(microsecond=0, second=0, minute=0)
    ticknames = []
    tickpos = []
    print(timeRange)
    for i in timeRange:
        tickdate = dt_begin + timedelta(seconds=i * sampling_time)
        if not fullyear:
            if tickdate.hour in [6, 12, 18]:
                tickpos.append(i)
                ticknames.append(tickdate.strftime("%H"))
            elif tickdate.hour == 0:
                tickpos.append(i)
                ticknames.append(tickdate.strftime("%d.%m.'%y"))
        else:# Check if this tickdate is the start of a month
            if tickdate.day == 1:
                tickpos.append(i)
                # Format the tickname to show month and year (e.g., 'Jan 2024')
                ticknames.append(tickdate.strftime("%b %Y"))
    # Let the horizontal axes labeling appear on top
    axes[0].tick_params(top=True, bottom=False, labeltop=True, labelbottom=False, rotation=45)
    axes[0].set_xlabel("Time (UTC)")
    axes[0].xaxis.set_label_position("top")
    # ax.set_xticks(np.arange(df1.shape[1]+1)-.5, minor=True)
    axes[0].set_yticks(np.arange(len(actions) + 1) - 0.5, minor=True)
    axes[0].tick_params(which="minor", bottom=False, left=False)
    # grid settings
    axes[0].grid(which="minor", color="w", linestyle="-", linewidth=3)
    axes[0].xaxis.grid(color=(1, 1, 1, 0.1), linestyle="-", linewidth=1)
    # add ticks and tick labels
    axes[0].set_xticks(tickpos)
    axes[0].set_xticklabels(ticknames)
    # Rotate the tick labels and set their alignment.
    plt.setp(axes[0].get_yticklabels(), rotation=30, ha="right", va="center", rotation_mode="anchor")

    ## next step
    # (2) - Plot Storages
    axes[1].plot(
        x,
        [12] * len(x),
        color=(50 / 255, 50 / 255, 50 / 255),
        linestyle="--",
        label="T minimum cooling",
    )
    axes[1].plot(
        x,
        [28] * len(x),
        color=(50 / 255, 50 / 255, 50 / 255),
        linestyle="--",
        label="T maximum cooling",
    )
    axes[1].plot(
        x,
        [6] * len(x),
        color=(200 / 255, 1 / 255, 200 / 255),
        linestyle="--",
        label="T minimum cold",
    )
    axes[1].plot(
        x,
        [11.5] * len(x),
        color=(200 / 255, 1 / 255, 200 / 255),
        linestyle="--",
        label="T maximum cold",
    )

    axes[1].plot(x, y["T_main_vorlauf"], color=(192 / 255, 0, 0), label="Main supply T")

    axes[1].plot(
        x, y['Temperature_cwCircuit_in'], color=(0, 192 / 255, 0), label="Cold supply T"
    )

    axes[1].plot(
        x, y["T_in_coolingCircuit"], color=(91 / 255, 155 / 255, 213 / 255), label="Cooling supply T"
    )

    # weather
    try:
        axes[1].fill_between(x, y["T_wb"], color=(0.44, 0.68, 0.28), linewidth=0.1, alpha=0.3, label=" T wet bulb")
    except:
        axes[1].fill_between(
        x, y["d_weather_drybulbtemperature"], color=(0.44, 0.68, 0.28), linewidth=0.1, alpha=0.3, label="Ambient T")
    # d_weather_drybulbtemperature

    # settings
    axes[1].set_ylabel("Temperature [°C]")
    axes[1].margins(x=0.0, y=0.1)
    axes[1].set_axisbelow(True)
    axes[1].grid(color=(0.9, 0.9, 0.9, 0.1), linestyle="-", linewidth=1)
    axes[1].legend(bbox_to_anchor=(1.0, 0.5), loc="center left", ncol=1, fontsize="x-small")
    axes[1].tick_params(axis="x", which="both", bottom=False, top=False, labelbottom=False)

    ## next step

    # (2) - Prices
    axes[2].plot(x, y["s_price_electricity"], color=(1.0, 0.75, 0.0), label="Power")
    axes[2].set_ylabel("Energy price [€/kWh]")
    axes[2].legend(bbox_to_anchor=(1.0, 0.5), loc="center left", ncol=1, fontsize="x-small")
    axes[2].margins(x=0.0, y=0.1)
    axes[2].tick_params(axis="x", which="both", bottom=False, top=False, labelbottom=False)
    axes[2].set_axisbelow(True)
    axes[2].grid(color=(0.9, 0.9, 0.9, 0.1), linestyle="-", linewidth=1)
    # (3) - demand
    axes[3].plot(
        x,
        y["CoolingDemandColdWater"] * 1e-3,
        color=(0.65, 0.65, 0.65),
        linewidth=2,
        alpha=0.9,
        label="Cold water demand",
    )
    axes[3].plot(
        x,
        y["CoolingDemandCoolingWater"] * 1e-3,
        color=(1.0, 0.75, 0.0),
        linewidth=2,
        alpha=0.9,
        label="Cooling water demand",
    )

    axes[3].set_ylabel("Demand [kW]")
    axes[3].legend(bbox_to_anchor=(1.0, 0.5), loc="center left", ncol=1, fontsize="x-small")
    axes[3].margins(x=0.0, y=0.1)
    axes[3].tick_params(axis="x", which="both", bottom=False, top=False, labelbottom=False)
    axes[3].set_axisbelow(True)
    axes[3].grid(color=(0.9, 0.9, 0.9, 0.1), linestyle="-", linewidth=1)
    # 4
    axes[4].plot(
        x,
        y["energy_cost_cooling_eur/h"],
        color=(0.65, 0.65, 0.65),
        linewidth=2,
        alpha=0.9,
        label="Energy cost per hour",
    )

    axes[4].set_ylabel("Energy cost [€/h]")
    axes[4].legend(bbox_to_anchor=(1.0, 0.5), loc="center left", ncol=1, fontsize="x-small")
    axes[4].margins(x=0.0, y=0.1)
    axes[4].tick_params(axis="x", which="both", bottom=False, top=False, labelbottom=False)
    axes[4].set_axisbelow(True)
    axes[4].grid(color=(0.9, 0.9, 0.9, 0.1), linestyle="-", linewidth=1)

    axes[5].plot(
        x,
        y["switches_per_hour"],
        color=(1.0, 0.75, 0.0),
        linewidth=2,
        alpha=0.9,
        label="Switches per hour",
    )
    axes[5].set_ylabel("Switches per hour")
    axes[5].legend(bbox_to_anchor=(1.0, 0.5), loc="center left", ncol=1, fontsize="x-small")
    axes[5].margins(x=0.0, y=0.1)
    axes[5].tick_params(axis="x", which="both", bottom=False, top=False, labelbottom=False)
    axes[5].set_axisbelow(True)
    axes[5].grid(color=(0.9, 0.9, 0.9, 0.1), linestyle="-", linewidth=1)
    # (6) Rewards
    cost_total = (
        y["energy_cost_cooling_eur"].cumsum()#*3600/120
    )

    axes[6].plot(x, cost_total, label="Cumulated energy costs", color=(0.44, 0.19, 0.63), linewidth=2, alpha=0.9)

    axes[6].set_ylabel("Energy cost in Eur")
    axes[6].set_xlabel("Time (UTC)")
    axes[6].set_axisbelow(True)
    axes[6].legend(bbox_to_anchor=(1.0, 0.5), loc="center left", ncol=1, fontsize="x-small")
    axes[6].margins(x=0.0, y=0.1)
    axes[6].grid(color=(0.9, 0.9, 0.9, 0.1), linestyle="-", linewidth=1)
    # add ticks and tick labels
    axes[6].set_xticks(tickpos)
    axes[6].set_xticklabels(ticknames, rotation=45)
    plt.savefig(f"fig{a}.pdf")
    a = a+1
    plt.close()