# from SA import fmuSensitivityAnalysis
# import time
# import pandas as pd
if __name__ == "__main__":

    fmu_filename = "eta_1000001_no_dymola_solvers.fmu"

    problem = {
        "num_vars": 85,
        "names": [
            "HydraulischeSwitch_variance",
            "SV146_variance_dp",
            "SV146_variance_riseTime",
            "PU_HeatPump_OperatingStrategy_variance",
            "HeatPump_variance_P",
            "HydraulicSwitch_variance",
            "SV605_variance_dp",
            "SV605_variance_riseTime",
            "SV235_variance_dp",
            "SV235_variance_riseTime",
            "SV246_variance_dp",
            "SV246_variance_riseTime",
            "SV_XX_variance_dp",
            "SV_XX_variance_riseTime",
            "RV600_variance_dp",
            "RV600_variance_riseTime",
            "PWT6_variance",
            "PU600_OperatingStrategy_variance",
            "PU235_OperatingStrategy_variance",
            "PU_HeatPump_HNLT_OperatingStrategy_variance",
            "PU215_OperatingStrategy_variance",
            "aFA_simple_2_1_variance",  # 22
            "HVFA_CN_795_variance",
            "HVFA_CN_796_variance",
            "HVFA_HNLT_variance",
            "SV138_variance_dp",
            "SV138_variance_riseTime",
            "SV_CN_HVFA_pressuredrop_variance_dp",
            "SV_CN_HVFA_pressuredrop_variance_riseTime",
            "SV_HNLT_HVFA_AFA_Correction_variance_dp",
            "SV_HNLT_HVFA_AFA_Correction_variance_riseTime",
            "SV_HNLT_HVFA_pressuredrop_variance_dp",
            "SV_HNLT_HVFA_pressuredrop_variance_riseTime",
            "RV105_variance_dp",
            "RV105_variance_riseTime",
            "SV105_variance_dp",
            "SV105_variance_riseTime",
            "Consumer_Producer_Switch_variance_dp",
            "Consumer_Producer_Switch_variance_riseTime",
            "Consumer_Producer_Switch1_variance_dp",
            "Consumer_Producer_Switch1_variance_riseTime",
            "SV106_variance_dp",
            "SV106_variance_riseTime",
            "RV205_variance_dp",
            "RV205_variance_riseTime",
            "SV205_variance_dp",
            "SV205_variance_riseTime",
            "SV206_variance_dp",
            "SV206_variance_riseTime",
            "PWT4_variance",
            "PWT5_variance",
            "PU138_OperatingStrategy_variance",
            "PU105_OperatingStrategy_variance",
            "PU205_OperatingStrategy_variance",
            "eChiller_variance",  # 33
            "VSI_variance",
            "HydraulicSwitch_HNHT_variance",
            "SV305_variance_dp",
            "SV305_variance_riseTime",
            "SV315_variance_dp",
            "SV315_variance_riseTime",
            "SV331_variance_dp",
            "SV331_variance_riseTime",
            "SV322_variance_dp",
            "SV322_variance_riseTime",
            "SV321_variance_dp",
            "SV321_variance_riseTime",
            "SV307_variance_dp",
            "SV307_variance_riseTime",
            "SV306_variance_dp",
            "SV306_variance_riseTime",
            "RV215_variance_dp",
            "RV215_variance_riseTime",
            "RV322_variance_dp",
            "RV322_variance_riseTime",
            "RV321_variance_dp",
            "RV321_variance_riseTime",
            "PWT1_variance",
            "PU315_OperatingStrategy_variance",
            "PU307_OperatingStrategy_variance",
            "PU306_OperatingStrategy_variance",
            "PU331_OperatingStrategy_variance",
            "PU322_OperatingStrategy_variance",
            "PU321_OperatingStrategy_variance",
            "CondensingBoiler_variance_P",
            "CHP1_variance_P",
            "CHP2_variance_P",  # 32
        ],
        "bounds": [
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.0],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.0],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.0],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.2],
            [0.8, 1.0],
            [0.8, 1.0],
            [0.8, 1.0],
            [0.8, 1.2],
            [0.8, 1.2],
        ],
    }

    print(dict(zip(problem["names"], problem["bounds"])))

    sample = "saltelli"

    N = 1024

    output_index = [1, 4, 7]

    outputs = [
        "HNHT_Buffer_fUpperTemperature",
        "HNHT_Buffer_fMidTemperature",
        "HNHT_Buffer_fLowerTemperature",
        "HNLT_Buffer_fUpperTemeprature",
        "HNLT_Buffer_fMidTemperature",
        "HNLT_Buffer_fLowerTemperature",
        "CN_Buffer_fUpperTemperature",
        "CN_Buffer_fMidTemperature",
        "CN_Buffer_fLowerTemperature",
        "HNLT_HVFA_fUpperTemperature",
        "HNLT_HVFA_fLowerTemperature",
        "electric_power_consumption",
        "gas_power_consumption",
        "CN_HVFA_fUpperTemperature",
        "CH_HVFA_fLowerTemperature",
        "HNHT_VSI_fUpperTemperature",
        "HNHT_VSI_fMidTemperature",
        "HNHT_VSI_fLowerTemperature",
        "Out_bSetStatusOn_HeatPump",
        "Out_bSetStatusOn_OuterCapillaryTubeMats",
        "Out_bLoading_HVFASystem_CN",
        "Out_bSetStatusOn_HVFASystem_CN",
        "Out_bSetStatusOn_eChiller",
        "Out_bLoading_HVFASystem_HNLT",
        "Out_bSetStatusOn_HVFASystem_HNLT" "Out_bLoading_VSISystem",
        "Out_bSetStatusOn_VSIStorage",
        "Out_bSetStatusOn_CondensingBoiler",
        "Out_bSetStatusOn_CHP2",
        "Out_bSetStatusOn_CHP1",
        "Out_bSetStatusOn_HeatExchanger1",
    ]

    analyzer = "sobol"

    csvIndex = 97638
    start_time = 0
    stop_time = 86400
    step_size = 30

    valuesforWater = pd.read_csv(
        ".csv",
        sep=";",
        usecols=[
            "HNHT_Buffer_fMidTemperature",
            "HNLT_Buffer_fMidTemperature",
            "CN_Buffer_fMidTemperature",
            "HNHT_VSI_fMidTemperature",
            "HNLT_HVFA_fLowerTemperature",
            "CN_HVFA_fLowerTemperature",
        ],
    )

    startTemp = valuesforWater.iat[csvIndex, 0]
    startTemp2 = valuesforWater.iat[csvIndex, 1]
    startTemp3 = valuesforWater.iat[csvIndex, 2]
    startTemp4 = valuesforWater.iat[csvIndex, 3]
    startTemp5 = valuesforWater.iat[csvIndex, 4]
    startTemp6 = valuesforWater.iat[csvIndex, 5]

    startValues = {
        "num_values": 6,
        "value_name": ["T_start_HNHT" "T_start_HNLT" "T_start_CN" "T_start_VSI" "T_start_HVFA_HNLT" "T_start_HVFA_CN"],
        "value": [startTemp, startTemp2, startTemp3, startTemp4, startTemp5, startTemp6],
    }

    pdPath = r"D:\Scheid_M\GeneralSA\systemETAInputs.csv"

    pdCols = [
        "time_daytime",
        "d_HNHT_prod_heat_demand_consumer",
        "d_HNLT_prod_heat_demand_consumer",
        "d_HNLT_prod_heat_demand_producer",
        "d_CN_prod_heat_demand_consumer",
        "weather_T_amb",
        "weather_T_Ground_1m",
        "time_month",
        "bSetStatusOn_HeatExchanger1",
        "bSetStatusOn_CHP1",
        "bSetStatusOn_CHP2",
        "bSetStatusOn_CondensingBoiler",
        "bSetStatusOn_VSIStorage",
        "bLoading_VSISystem",
        "bSetStatusOn_HVFASystem_HNLT",
        "bLoading_HVFASystem_HNLT",
        "bSetStatusOn_eChiller",
        "bSetStatusOn_HVFASystem_CN",
        "bLoading_HVFASystem_CN",
        "bSetStatusOn_OuterCapillaryTubeMats",
        "bSetStatusOn_HeatPump",
    ]

    inputOrder = [
        "weather_T_amb",
        "weather_T_Ground_1m",
        "d_HNHT_prod_heat_demand_consumer",
        "d_HNLT_prod_heat_demand_producer",
        "d_CN_prod_heat_demand_consumer",
        "d_HNLT_prod_heat_demand_consumer",
        "bSetStatusOn_HeatExchanger1",
        "bSetStatusOn_CHP1",
        "bSetStatusOn_CHP2",
        "bSetStatusOn_CondensingBoiler",
        "bSetStatusOn_VSIStorage",
        "bLoading_VSISystem",
        "bSetStatusOn_HVFASystem_HNLT",
        "bLoading_HVFASystem_HNLT",
        "bSetStatusOn_eChiller",
        "bSetStatusOn_HVFASystem_CN",
        "bLoading_HVFASystem_CN",
        "bSetStatusOn_OuterCapillaryTubeMats",
        "bSetStatusOn_HeatPump",
        "time_daytime",
        "time_month",
    ]

    timestart = time.time()

    dict = fmuSensitivityAnalysis(
        fmu_filename=fmu_filename,
        problem=problem,
        sample=sample,
        N=N,
        output_index=output_index,
        analyze=analyzer,
        step_size=step_size,
        start_time=start_time,
        stop_time=stop_time,
        pdPath=pdPath,
        pdCols=pdCols,
        inputOrder=inputOrder,
        outputs=outputs,
        multiprocessing=True,
        multiprocessingCores=32,
        csvIndex=csvIndex,
        startValues=startValues,
    )

    timeende = time.time()

    print("Runtime:", timeende - timestart)

    print(dict)
